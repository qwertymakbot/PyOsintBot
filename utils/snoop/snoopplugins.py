#! /usr/bin/env python3
# Copyright (c) 2020 Snoop Project <snoopproject@protonmail.com>
"""–ü–ª–∞–≥–∏–Ω—ã Snoop Project/–ß–µ—Ä–Ω–æ–≤–∏–∫"""

import csv
import ipaddress
import itertools
import json
import locale
import os
import platform
import re
import random
import requests
import shutil
import signal
import socket
import sys
import threading
import time
import webbrowser

from collections import Counter
from colorama import Fore, Style, init
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, TimeoutError
from rich.console import Console
from rich.progress import track, BarColumn, TimeRemainingColumn, SpinnerColumn, TimeElapsedColumn, Progress
from rich.table import Table
from rich.panel import Panel
from rich.style import Style as STL
from urllib.parse import urlparse

import snoopbanner

Android = True if hasattr(sys, 'getandroidapilevel') else False

if not Android:
    import folium
    from folium.plugins import MarkerCluster
    from folium.plugins import MousePosition
    from more_itertools import unique_everseen
    from operator import itemgetter

locale.setlocale(locale.LC_ALL, '')
init(autoreset=True)
console = Console()
time_date = time.localtime()
head0 = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) ' + \
         f'Chrome/{random.choice(range(97, 108, 1))}.0.{random.choice(range(2007, 3008, 23))}.100 Safari/537.36'}


def ravno():
    console.rule(characters='=', style="cyan bold")


def helpend():
    console.rule("[bold red]–ö–æ–Ω–µ—Ü —Å–ø—Ä–∞–≤–∫–∏")


wZ1bad = []  #–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ ip (–Ω–µ ip) –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Yandex, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ '–≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'
azS = []  #—Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ future request
coord = []  #–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–Ω–æ–≥–æ—Ü–µ–ª–µ–≤–æ–π —Å–ø–∏—Å–æ–∫


my_session = requests.Session()
da = requests.adapters.HTTPAdapter(max_retries=2)
my_session.mount('https://', da)


dirresults = os.getcwd()
progressYa = Progress(TimeElapsedColumn(), "[progress.percentage]{task.percentage:>1.0f}%", auto_refresh=False)


## ERR.
def Erf(hvostfile):
    print(f"\033[31;1m–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏_–ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: '{hvostfile}'.\033[0m \033[36m\n " + \
          f"\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ ‚Äî\033[0m \033[36;1mutf-8.\033[0m\n" + \
          f"\033[36m–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–ª–æ–∫–Ω–æ—Ç –≤ OS Windows —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ ‚Äî ANSI.\033[0m\n" + \
          f"\033[36m–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à —Ñ–∞–π–ª '{hvostfile}' –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É [—Ñ–∞–π–ª ---> —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ ---> utf-8].\n" + \
          f"\033[36m–ò–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–µ—á–∏—Ç–∞–µ–º—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.")
    ravno()


## –ö–∞—Ä—Ç—ã, –º–µ—Ç–∞ –∏–Ω—Ñ–æ.
def meta_icon(stat=None, marker_cluster=None, maps=None):
    layer_right = folium.TileLayer('openstreetmap')
    layer_left = folium.TileLayer('OpenTopoMap')
    sbs = folium.plugins.SideBySideLayers(layer_left=layer_left, layer_right=layer_right)
    layer_left.add_to(maps)
    layer_right.add_to(maps)
    lay2 = sbs.add_to(maps)

    icon = folium.CustomIcon("https://raw.githubusercontent.com/snooppr/snoop/master/icons/Snoop.png", icon_size=(178, 102))

    if stat:
        popup = "üí¨ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –≤ <b>Snoop full –≤–µ—Ä—Å–∏–∏</b> " + \
                "–¥–æ—Å—Ç—É–ø–Ω—ã –æ—Ç—á–µ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–æ–π –∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ <b>html</b> —Ñ–æ—Ä–º–∞—Ç–µ, " + \
                "–Ω–æ –∏ –≤ <b>csv/txt</b> —Ñ–æ—Ä–º–∞—Ç–∞—Ö.<br>{0}<br>{1}".format('~' * 78, stat)
    else:
        popup = "üí¨ –í <b>Snoop demo version</b> –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—à—å HTML-–æ—Ç—á—ë—Ç —Å <b>—É—Ä–µ–∑–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º</b>.<br>" + \
                "–í Snoop full version –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTML-—Ä–µ–ø–æ—Ä—Ç, <br>" +\
                "–∞ —Ç–∞–∫–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –≤ txt/csv —Ñ–æ—Ä–º–∞—Ç–∞—Ö.<br>{0}<br>{1}".format('~' * 73, stat)

    return folium.Marker(location=[74.733, -1.725], popup=popup, icon=icon).add_to(marker_cluster), lay2

# –ü–∞–º—è—Ç–∫–∞.
def glob_marker(count_country=None, full=False):
    h = "<b>üåé GEO:</b> " if full else ""
    a_tmp = []
    for k, v in sorted(Counter(count_country).items(), key=lambda x: x[1], reverse=True):
        a_tmp.append(f"({k} ‚áî {v})")
    flag_str_sum = h + "; ".join(a_tmp) + ("." if bool(a_tmp) else "")

    return flag_str_sum

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ html –æ—Ç—á–µ—Ç–∞.
def save_maps(mapsme=None):
    with open(mapsme) as fr:
        fr = fr.read()
        mapsme_end = fr.replace("<script src=\"https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js\"></script>",
                                "<script src=\"../../../web/lib.js\"></script>", 1) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ Snoop.
    with open(mapsme, 'w') as fw:
        fw.write(mapsme_end)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤.
def foliums():
    maps = folium.Map(location=[48.5, -33.2], zoom_start=2, no_wrap=True)
    control_ = folium.FeatureGroup(name='–ü–∞–º—è—Ç–∫–∞')
    maps.add_child(control_)

    marker_cluster = MarkerCluster().add_to(control_)
    mcg = folium.plugins.MarkerCluster(control=False)
    maps.add_child(mcg)

    MousePosition().add_to(maps)
    folium.plugins.Fullscreen(position="topright", title="–û—Ç–∫—Ä—ã—Ç—å –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω",
                              title_cancel="–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞",force_separate_button=True).add_to(maps)

    return maps, mcg, marker_cluster


## –ú–æ–¥—É–ª—å Yandex_parser.
# api https://yandex.ru/dev/id/doc/dg/reference/response.html#response__norights_5
def module3():
    while True:
        listlogin = []
        dicYa = {}

# –ü–∞—Ä—Å–∏–Ω–≥.
        def parsingYa():
            for login in listlogin:
                urlYa = f'https://yandex.ru/collections/api/users/{login}/'
                #urlYa = f'https://yandex.ru/znatoki/api/user/public/{login}/'
                try:
                    r = my_session.get(urlYa, headers=head0, timeout=3)
                    azS.append(r)
                except Exception:
                    print(f"\n{Fore.RED}–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–æ–ø—É—Å–∫ ‚Äî> '{Style.RESET_ALL}{Style.BRIGHT}" + \
                          f"{Fore.RED}{login}{Style.RESET_ALL}{Fore.RED}'{Style.RESET_ALL}")
                    if Ya != '4':
                        ravno()
                    continue

            with progressYa:
                if Ya == '4':
                    task = progressYa.add_task("", total=len(listlogin))

                for reqY, login in zip(azS, listlogin):
                    if Ya == '4':
                        progressYa.update(task, advance=1, refresh=True)

                    rY = reqY.text
                    #print(rY.text)
                    try:
                        rdict = json.loads(rY.text)
                        if rdict.get('title') == "404 Not Found":  #—Ä–∞–≤–Ω–æ
                            raise Exception("")
                    except Exception:
                        rdict = {}
                        rdict.update(public_id="–£–≤—ã", display_name="-No-")

                    login_tab = login.split(sep='@', maxsplit=1)[0]
                    pub = rdict.get("public_id")
                    name = rdict.get("display_name")
                    email = f"{login_tab}@yandex.ru"
                    avatar = rdict.get("default_avatar_id")

                    if rdict.get("display_name") == "-No-":
                        if Ya != '4':
                            print(Style.BRIGHT + Fore.RED + "\n–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ")
                            console.rule(characters="=", style="cyan bold\n")
                        else:
                            continue
                        continue
                    else:
                        table1 = Table(title=f"\n{Style.DIM}{Fore.CYAN}demo_func{Style.RESET_ALL}", style="green")
                        table1.add_column("–ò–º—è", style="magenta", overflow="fold")
                        table1.add_column("–õ–æ–≥–∏–Ω", style="cyan", overflow="fold")
                        table1.add_column("E-mail", style="cyan", overflow="fold")
                        if Ya == '3':
                            table1.add_row(name, "–ü—Ä–æ–ø—É—Å–∫", "–ü—Ä–æ–ø—É—Å–∫")
                        else:
                            table1.add_row(name, login_tab, email)
                        console.print(table1)

                        otzyv = f"https://reviews.yandex.ru/user/{pub}"
                        market = f"https://market.yandex.ru/user/{pub}/reviews"

                        if Ya == '3':
                            music = f"\033[33;1m–ü—Ä–æ–ø—É—Å–∫\033[0m"
                        else:
                            music = f"https://music.yandex.ru/users/{login}/tracks"
                        dzen = f"https://zen.yandex.ru/user/{pub}"
                        qu = f"https://yandex.ru/q/profile/{pub}/"
                        avatar_html = f"https://avatars.mds.yandex.net/get-yapic/{avatar}/islands-retina-50"
                        avatar_cli = f"https://avatars.mds.yandex.net/get-yapic/{avatar}/islands-300"

                        print("\033[32;1m–Ø.–û—Ç–∑—ã–≤—ã:\033[0m", otzyv)
                        print("\033[32;1m–Ø.–ú–∞—Ä–∫–µ—Ç:\033[0m", market)
                        print("\033[32;1m–Ø.–ú—É–∑—ã–∫–∞:\033[0m", music)
                        print("\033[32;1m–Ø.–î–∑–µ–Ω:\033[0m", dzen)
                        print("\033[32;1m–Ø.–ö—å—é:\033[0m", qu)
                        print("\033[32;1m–Ø.Avatar:\033[0m", avatar_cli)

                        yalist = [avatar_html, otzyv, market, music, dzen, qu]

                    for webopen in yalist:
                        if webopen == music and Ya == '3':
                            continue
                        else:
                            if "arm" in platform.platform(aliased=True, terse=0) or "aarch64" in platform.platform(aliased=True, terse=0):
                                pass
                            else:
                                webbrowser.open(webopen)
            ravno()
            azS.clear()

        print("\n\033[36m[\033[0m\033[32;1m1\033[0m\033[36m] --> –£–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" + \
              "[\033[0m\033[32;1m2\033[0m\033[36m] --> –£–∫–∞–∑–∞—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n" + \
              "[\033[0m\033[32;1m3\033[0m\033[36m] --> –£–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" + \
              "[\033[0m\033[32;1m4\033[0m\033[36m] --> –£–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" + \
              "[\033[0m\033[32;1mhelp\033[0m\033[36m] --> –°–ø—Ä–∞–≤–∫–∞\n" + \
              "[\033[0m\033[31;1mq\033[0m\033[36m] --> –í—ã—Ö–æ–¥\n")

        Ya = console.input("[cyan]–≤–≤–æ–¥ --->  [/cyan]")

# –í—ã—Ö–æ–¥.
        if Ya == "q":
            print(Style.BRIGHT + Fore.RED + "–í—ã—Ö–æ–¥")
            sys.exit()

# Help.
        elif Ya == "help":
            snoopbanner.help_yandex_parser()
            helpend()

# –£–∫–∞–∑–∞—Ç—å login.
        elif Ya == '1':
            print("\033[36m‚îî‚îÄ‚îÄ–í–≤–µ–¥–∏—Ç–µ login/email —Ä–∞–∑—ã—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä,\033[0m\033[32;1m bobbimonov\033[0m\n")
            login = console.input("[cyan]login/email --->  [/cyan]")
            login = login.split(sep='@', maxsplit=1)[0]
            listlogin.append(login)

            parsingYa()

# –£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ø.–î–∏—Å–∫.
        elif Ya == '2':
            print("\033[36m‚îî‚îÄ‚îÄ–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä,\033[0m\033[32;1m https://yadi.sk/d/7C6Z9q_Ds1wXkw\033[0m\n")
            urlYD = console.input("[cyan]url --->  [/cyan]")

            try:
                r2 = my_session.get(urlYD, headers=head0, timeout=3)
            except Exception:
                print(Fore.RED + "\n–û—à–∏–±–∫–∞" + Style.RESET_ALL)
                console.rule(characters='=', style="cyan bold\n")
                continue
            try:
                login = r2.text.split('displayName":"')[1].split('"')[0]
            except Exception:
                login = "NoneStop"
                print(Style.BRIGHT + Fore.RED + "\n–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ")

            if login != "NoneStop":
                listlogin.append(login)
                parsingYa()

# –£–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ø–Ω–¥–µ–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        elif Ya == '3':
            print("\033[36m‚îî‚îÄ‚îÄ–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ø–Ω–¥–µ–∫—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä,\033[0m\033[32;1m tr6r2c8ea4tvdt3xmpy5atuwg0\033[0m\n")
            login = console.input("[cyan]hash --->  [/cyan]")
            listlogin.append(login)

            if len(login) != 26:
                print(Style.BRIGHT + Fore.RED + "‚îî‚îÄ‚îÄ–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" + Style.RESET_ALL)
                ravno()
            else:
                parsingYa()

# –£–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª —Å –ª–æ–≥–∏–Ω–∞–º–∏.
        elif Ya == '4':
            print("\033[31;1m‚îî‚îÄ‚îÄ–í demo version —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\033[0m\n")
            snoopbanner.donate()
        else:
            print(Style.BRIGHT + Fore.RED + "‚îî‚îÄ‚îÄ–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" + Style.RESET_ALL)
            ravno()


## –ú–æ–¥—É–ª—å Reverse Vgeocoder.
def module2():
    if Android:
        print(Style.BRIGHT + Fore.RED + "‚îî‚îÄ‚îÄ–ü–ª–∞–≥–∏–Ω Reverse Vgeocoder '—Å–ª–æ–∂–µ–Ω' –∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –≤ Snoop_termux\n\n–í—ã—Ö–æ–¥\n" + Style.RESET_ALL)
        sys.exit()
    while True:
        print("""
\033[36m[\033[0m\033[32;1m1\033[0m\033[36m] --> –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª\n\
[\033[0m\033[32;1mhelp\033[0m\033[36m] --> –°–ø—Ä–∞–≤–∫–∞\n\
[\033[0m\033[31;1mq\033[0m\033[36m] --> –í—ã—Ö–æ–¥\n""")

        Vgeo = console.input("[cyan]–≤–≤–æ–¥ --->  [/cyan]")

# –í—ã—Ö–æ–¥.
        if Vgeo == "q":
            print(Style.BRIGHT + Fore.RED + "–í—ã—Ö–æ–¥")
            sys.exit()

# Help.
        elif Vgeo == "help":
            snoopbanner.help_vgeocoder_vgeo()
            helpend()

# –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
        elif Vgeo == '1':
            float_patern = '[-]? (?: (?: \d* \. \d+ ))'
            rx = re.compile(float_patern, re.VERBOSE)
            while True:
                print("\033[36m‚îî‚îÄ‚îÄ–í–≤–µ–¥–∏—Ç–µ \033[0m\033[32;1m–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å\033[0m \033[36m–∫ —Ñ–∞–π–ª—É (–∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ -> utf-8) —Å –¥–∞–Ω–Ω—ã–º–∏: \n\
        [–≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã] –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ –æ–∫–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞\033[0m\n")
                put = console.input("[cyan]File --->  [/cyan]")
                if sys.platform == 'win32':
                    put = put.replace('"', '').strip()
                else:
                    put = put.replace("'", "").strip()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã '–û–±—Ä–∞—Ç–Ω—ã–π –≥–µ–æ–∫–æ–¥–µ—Ä'.
                maps, mcg, marker_cluster = foliums()
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏.
                try:
                    with open(put, "r", encoding="utf8") as geo:
# –í—ã–±–æ—Ä–∫–∞ –≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
                        for line in geo.readlines():
                            s = rx.findall(line)
                            s_bad = not rx.findall(line)
                            wZ1bad.append(str(line) if s_bad is True else "")
                            if len(s) == 0 or len(s) == 1 or len(s) == 3 or len(s) == 5 or len(s) >= 7:
                                wZ1bad.append(', '.join(s))
                                continue
                            try:
                                coord.append(list(map(float, s[4:6]))) if s[4:6] else ""
                            except Exception:
                                pass
                            try:
                                coord.append(list(map(float, s[2:4]))) if s[2:4] else ""
                            except Exception:
                                pass
                            try:
                                coord.append(list(map(float, s[0:2]))) if s[0:2] else ""
                            except Exception:
                                pass
# –£–¥–∞–ª–∏–ª–∏ –¥—É–±–ª–∏.
                        coord2 = list(unique_everseen(coord))
                        coord.clear()
# –ö–æ–Ω–µ—Ü –≤—ã–±–æ—Ä–∫–∏.
                        if sys.platform == 'win32':
                            print('\033[32;1m|\n‚îî‚îÄ‚îÄGood!\033[0m')
                        else:
                            print('\033[32;1m‚îÉ\n‚îó‚îÅ‚îÅGood!\033[0m')
                    break
                except Exception:
                    print("\033[31;1m‚îî‚îÄ‚îÄ–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å." + \
                          "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ –æ–∫–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞\033[0m")
                    hvostput = os.path.split(put)[1].replace('"', '')
                    Erf(hvostput)

            while True:
                print("\n\033[36m‚ï≠–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:\033[0m\n" + \
                      "\033[36m‚îú‚îÄ‚îÄ\033[36m[\033[0m\033[32;1m1\033[0m\033[36m] --> –ü—Ä–æ—Å—Ç–æ–π (demo version)\033[0m\n" + \
                      "\033[36m‚îú‚îÄ‚îÄ\033[36m[\033[0m\033[32;1m2\033[0m\033[36m] --> –ü–æ–¥—Ä–æ–±–Ω—ã–π (full version)\033[0m\n" + \
                      "\033[36m‚îî‚îÄ‚îÄ\033[36m[\033[0m\033[31;1mq\033[0m\033[36m] --> –í—ã—Ö–æ–¥\033[0m\n")
                rGeo = console.input("[cyan]–≤–≤–æ–¥ --->  [/cyan]")

                if rGeo == "q" or rGeo == '1' or rGeo == '2':
                    break
                else:
                    print(Style.BRIGHT + Fore.RED + "‚îî‚îÄ‚îÄ–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" + Style.RESET_ALL)
                    ravno()

            if rGeo == "q":
                print(Style.BRIGHT + Fore.RED + "–í—ã—Ö–æ–¥")
                break
                sys.exit()
            if rGeo == '1':
                timestartR = time.time()
                with console.status("[green bold]–û–∂–∏–¥–∞–π—Ç–µ, –∏–¥—ë—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...", spinner='earth'):
                    n_yes = 0

                    dsc = {}
                    count_country = []
                    for geo_sh_do in coord2:
# –ì–µ–æ —à-–¥ –æ—Ç +-90/+-180.
                        if not -90.1 <= geo_sh_do[0] <= 90.1 or not -180.1 <= geo_sh_do[1] <= 180.1:
                            wZ1bad.append(str(geo_sh_do))
                            continue
                        n_yes += 1
                        coord.append(geo_sh_do)
# 1. –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥.
                        try:
                            folium.Marker(location=geo_sh_do, popup="üåé <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b><br><i> " + str(geo_sh_do[0]) + " " + \
                            str(geo_sh_do[1]) + "<br>" + "~" * 16, icon=folium.Icon(color='blue', icon='ok-sign')).add_to(marker_cluster)

                            flag_str_sum = glob_marker(count_country)
                        except Exception:
                            continue

                    meta_icon(stat=flag_str_sum, marker_cluster=marker_cluster, maps=maps)

                    folium.LayerControl(collapsed=False).add_to(maps)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã osm.
                    namemaps = time.strftime("%d_%m_%Y_%H_%M_%S", time_date)
                    namemaps = (f'Maps_{namemaps}.html')
                    mapsme = str(dirresults + "/results/plugins/ReverseVgeocoder/" + str(namemaps))
                    maps.save(mapsme)

# –°–æ—Ö—Ä–∞–Ω–∏–µ–Ω/–æ—Ç–∫—Ä—ã—Ç–∏–µ HTML.
                    save_maps(mapsme=mapsme)
                    try:
                        if lcoord >= 1:
                            webbrowser.open(str("file://" + mapsme))
                    except Exception:
                        pass

# –û–±—Ä–∞–±–æ—Ç–∫–∞ bad (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞).
                    wZ1bad_raw = []
                    for i in wZ1bad:
                        [wZ1bad_raw.append(i2) for i2 in i] if isinstance(i, list) else wZ1bad_raw.append(i)
                    wZ1bad_raw2 = list(unique_everseen(wZ1bad_raw))
                    wZ1bad_raw2.remove('')
# –ö–æ–ª-–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
                    lcoord, lwZ1bad = n_yes, len(wZ1bad_raw2)

                hvostR = os.path.split(put)[1]
                timefinishR = time.time() - timestartR

                print(Style.RESET_ALL + Fore.CYAN + f"\n‚ï≠–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ '\033[36;1m{hvostR}\033[0m\033[36m' -->",
                      "\033[36;1m(%.0f" % float(timefinishR) + "sec)" + Style.RESET_ALL)
                print(Style.RESET_ALL + Fore.CYAN + f"‚îú‚îÄ–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ --> '\033[32;1m{lcoord}\033[0m\033[36m' –≥–µ–æ–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

                if lwZ1bad >= 1:
                    print(Style.RESET_ALL + Fore.CYAN + f"‚îú‚îÄ–û—Ç–±—Ä–æ—à–µ–Ω–æ --> '\033[31;1m{lwZ1bad}\033[0m\033[36m' —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

                path_dir = "/results/plugins/ReverseVgeocoder/" if sys.platform != 'win32' else "\\results\\plugins\\ReverseVgeocoder\\"
                print(Style.RESET_ALL + Fore.CYAN + "‚îî‚îÄ‚îÄ–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: " + Style.RESET_ALL + \
                      f"\033[36;1m{dirresults}{path_dir}*[.txt.html.csv]")
                try:
                    if lcoord >= 1:
                        webbrowser.open(str("file://" + mapsme))
                except Exception:
                    pass


# –ó–∞–ø–∏—Å—å –≤ txt.
                try:
                    file_txtR = open(dirresults + "/results/plugins/ReverseVgeocoder/" + str(hvostR) + ".txt", "w", encoding="utf-8")
                except Exception:
                    pass
                file_txtR.write(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{hvostR}' ({lcoord}):\n")
                for coord_geo in coord:
                    coord_geo = ",".join([str(i) for i in coord_geo])
                    file_txtR.write(f"{coord_geo}\n")
                file_txtR.write("===================================" + "\n\n")
                file_txtR.write(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{hvostR}' ({lwZ1bad}):\n")
                for badGEO in wZ1bad_raw2:
                    file_txtR.write(f"{badGEO}\n")
                file_txtR.write("===================================" + "\n\n")
                file_txtR.write(time.strftime(f"–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ '{hvostR}': %d/%m/%Y_%H:%M:%S", time_date))
                file_txtR.write(f"\n¬©2020-{time.localtime().tm_year} ¬´Snoop Project¬ª (demo version).")
                file_txtR.close()
            if rGeo == '2':
                print("\033[31;1m‚îî‚îÄ‚îÄ–í demo version —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\033[0m\n")
                snoopbanner.donate()
            break
            sys.exit()
        else:
            print(Style.BRIGHT + Fore.RED + "‚îî‚îÄ‚îÄ–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" + Style.RESET_ALL)
            ravno()


## –ú–æ–¥—É–ª—å GEO_IP/domain.
def module1():
    t_socket = 4
    domain = None
    res4, res6 = None, None

# –î–æ–º–µ–Ω.
    def task_fbn(dip):
        nonlocal domain
        #time.sleep(11)
        domain = socket.getfqdn(dip)
        return domain

# –î–æ–º–µ–Ω > IPv4/v6.
    def res46(dipp):
        nonlocal res4, res6
        #time.sleep(11)
        try:
            res46 = socket.getaddrinfo(f"{dipp}", 443)
            try:
                res4 = res46[0][4][0] if ipaddress.IPv4Address(res46[0][4][0]) else ""
            except Exception:
                res4 = "-"
            try:
                res6 = res46[-1][4][0] if ipaddress.IPv6Address(res46[-1][4][0]) else ""
            except Exception:
                res6 = "-"
        except Exception:
            res4, res6 = "-", "-"

        return res4, res6

# –ü–æ—Ç–æ–∫–∏.
    def treads_dr(fun, args, dr):
        """–ü–æ—Ç–æ–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ socket-—Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –∏–º–µ—é—â–∏–µ —Ç–∞–π–º–∞—É—Ç–∞.

        –í —Å–ª—É—á–∞–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è (–Ω–∞ Android –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ > 1 –º–∏–Ω—É—Ç—ã, –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç,
        –∫–æ–≥–¥–∞ ip/domain –ª–æ–∂–Ω—ã–π) —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø–æ—Ç–æ–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è 't_socket'.
        """

        d1 = threading.Thread(target=fun, args=(args,))
        d1.start()
        d1.join(t_socket)

        if domain is None or (dr=='res' and res4 is None and res6 is None):
            console.log("[bold red]--> —Ç–∞–π–º–∞—É—Ç | —Ä–µ—Å—É—Ä—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.[/bold red]")
            os.kill(os.getpid(), signal.SIGBREAK) if sys.platform == 'win32' else os.kill(os.getpid(), signal.SIGKILL)

# –ó–∞–ø—Ä–æ—Å future request.
    def reqZ():
        try:
            r = req.result()
            return r.text
        except requests.exceptions.ConnectionError:
            print(Fore.RED + "\n–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n" + Style.RESET_ALL)
        except requests.exceptions.Timeout:
            print(Fore.RED + "\n–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç\n" + Style.RESET_ALL)
        except requests.exceptions.RequestException:
            print(Fore.RED + "\n–û—à–∏–±–∫–∞ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞\n" + Style.RESET_ALL)
        except requests.exceptions.HTTPError:
            print(Fore.RED + "\n–û—à–∏–±–∫–∞ HTTPS\n" + Style.RESET_ALL)
        return "Err"

# –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–π –∏–ª–∏ '-f'.
    ravno()
    print("\n\033[36m–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–ø—Ä–∏–º–µ—Ä:\033[0m \033[32;1mexample.com\033[0m\033[36m),\n" + \
          "–∏–ª–∏ IPv4/IPv6 (–ø—Ä–∏–º–µ—Ä:\033[0m" + \
          "\033[32;1m 8.8.8.8\033[0m\033[36m),\n" + \
          "–∏–ª–∏ url (–ø—Ä–∏–º–µ—Ä: \033[32;1mhttps://example.com/1/2/3/foo\033[0m\033[36m), \n" + \
          "–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.\n" + \
          "[\033[0m\033[32;1mfile\033[0m\033[36m] --> –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö\n" + \
          "[\033[0m\033[32;1menter\033[0m\033[36m] --> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–µ–º GEO_IP\n" + \
          "[\033[0m\033[31;1mq\033[0m\033[36m] --> –í—ã—Ö–æ–¥")


    dip = console.input("\n[cyan]–≤–≤–æ–¥ --->  [/cyan]")

# –≤—ã—Ö–æ–¥.
    if dip == "q":
        print(Style.BRIGHT + Fore.RED + "–í—ã—Ö–æ–¥")
        sys.exit()

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
    elif dip == 'file':
        while True:
            print("""\033[36m‚îú‚îÄ‚îÄ–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞
‚îÇ
[\033[0m\033[32;1m1\033[0m\033[36m] --> \033[30;1mOnline (–º–µ–¥–ª–µ–Ω–Ω–æ)\033[0m\033[36m
[\033[0m\033[32;1m2\033[0m\033[36m] --> Offline (–±—ã—Å—Ç—Ä–æ)
[\033[0m\033[32;1m3\033[0m\033[36m] --> Offline_—Ç–∏—Ö–∏–π (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ)
[\033[0m\033[32;1mhelp\033[0m\033[36m] --> –°–ø—Ä–∞–≤–∫–∞\n\
[\033[31;1mq\033[0m\033[36m] --> –í—ã—Ö–æ–¥\033[0m\n""")

            dipbaza = console.input("[cyan]–≤–≤–æ–¥ --->  [/cyan]")

# –í—ã—Ö–æ–¥.
            if dipbaza == "q":
                print("\033[31;1m–í—ã—Ö–æ–¥\033[0m")
                sys.exit(0)
# –°–ø—Ä–∞–≤–∫–∞.
            elif dipbaza == "help":
                snoopbanner.geo_ip_domain()
                helpend()

# –û—Ñ—Ñ–ª–∞–π–Ω –ø–æ–∏—Å–∫.
# –û—Ç–∫—Ä—ã–≤–∞–µ–º GeoCity.
            elif dipbaza == "2" or dipbaza == "3":
                while True:
                    print("\033[31;1m‚îî‚îÄ‚îÄ–í demo version —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\033[0m\n")
                    snoopbanner.donate()
                    break

                break

# –û–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫.
            elif dipbaza == "1":
                print("\033[31;1m‚îî‚îÄ‚îÄ–í demo version —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\033[0m\n")
                snoopbanner.donate()
                break

# –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–ª—é—á–∞ –ø—Ä–∏ –æ—Ñ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫–µ. –í—ã—Ö–æ–¥.
            else:
                print(Style.BRIGHT + Fore.RED + "‚îî‚îÄ‚îÄ–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä" + Style.RESET_ALL)
                ravno()

# –æ–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
    else:
        def ip_check(url_api, dip, res4, err):
            if dip == "": url_api = url_api
            elif res4 == "-": url_api = f"{url_api}{dip}"
            else: url_api = f"{url_api}{res4}"

            try:
                r = my_session.get(url=url_api, headers=head0, timeout=3)
                dip_dic = json.loads(r.text)
                T1 = dip_dic["country_code"] if err is False else dip_dic["country"]["isoCode"]
                T2 = dip_dic["region"] if err is False else dip_dic["city"]["name"]
                T3 = dip_dic["latitude"] if err is False else dip_dic["location"]["latitude"]
                T4 = dip_dic["longitude"] if err is False else dip_dic["location"]["longitude"]
                if err is True and res4 == '-':
                    T5 = my_session.get(url=f"https://ipinfo.io/ip", timeout=3).text
                else:
                    T5 = dip_dic.get("ip")
            except Exception:
                try:
                    if err is True:
                        if dip == '': p = ''
                        elif res4 != '-': p = res4 + '/'
                        else: dip + '/'
                        console.log("[bold yellow]--> –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π url_ip[/bold yellow]")
                        T1 = my_session.get(url=f"https://ipinfo.io/{p}country", timeout=3).text
                        T2 = my_session.get(url=f"https://ipinfo.io/{p}region", timeout=3).text
                        T5 = my_session.get(url=f"https://ipinfo.io/{p}ip", timeout=3).text

                        T3 = "stop"
                        T4 = "stop"
                        return T1, T2, T3, T4, T5
#                        raise Exception("")
                    return ip_check('https://ipdb.ipcalc.co/ipdata/', dip, res4, err=True)
                except:
                    T1 = "-"
                    T2 = "-"
                    T3 = "stop"
                    T4 = "stop"
                    T5 = "-"
                    print("""\033[31;1m\n
|\ | _ ._  _
| \|(_)| |(/_\033[0m""")

            return T1, T2, T3, T4, T5


        table_name = "–ú–æ–π ip" if dip == "" else dip

        if '.' not in dip and ':' not in dip and dip != "" or (dip != "" and len(dip) <= 4) or '..' in dip:
            print(Style.BRIGHT + Fore.RED + "‚îî‚îÄ‚îÄ–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥\n" + Style.RESET_ALL)
            return module1()
        else:
            u = urlparse(dip).hostname
            if bool(u) is False:
                dip = dip.split("/")[0].strip()
            else:
                dip = u.replace("www.", "").strip()


        with console.status("[cyan]—Ä–∞–±–æ—Ç–∞—é[/cyan]", spinner="earth"):
            treads_dr(task_fbn, dip, dr="dom")

            try:
                ipaddress.ip_address(dip)
                resD1 = domain
            except Exception:
                resD1 = dip

            treads_dr(res46, resD1, dr="res")

            T1, T2, T3, T4, T5 = ip_check('https://ipwho.is/', dip, res4, err=False)

            try:
                if ipaddress.IPv4Address(dip): res4 = dip
            except Exception: pass
            try:
                if ipaddress.IPv6Address(dip): res6 = dip
            except Exception: pass

            table = Table(title=table_name, title_style="italic bold red", style="green", header_style='green')
            table.add_column("–ö–æ–¥", style="magenta")
            if dip == "":
                table.add_column("IP", style="cyan", overflow="fold")
            else:
                table.add_column("IPv4", style="cyan", overflow="fold")
                table.add_column("IPv6", style="cyan", overflow="fold")
            table.add_column("–î–æ–º–µ–Ω", style="green", overflow="fold")
            table.add_column("–†–µ–≥–∏–æ–Ω", style="green", overflow="fold")
            if dip == "":
                table.add_row(T1, T5, domain, T2)
            else:
                table.add_row(T1, res4, res6, domain, T2)
            console.print(table)
            if T3 == "stop" and T4 == "stop":
                print("\n")
                URL_GEO = ""
            else:
                URL_GEO = f"https://www.openstreetmap.org/#map=13/{T3}/{T4}"
                URL_GEO2 = f"https://www.google.com/maps/@{T3},{T4},12z"
                print(Style.BRIGHT + Fore.BLACK + f"{URL_GEO}" + Style.RESET_ALL)
                print(Style.BRIGHT + Fore.BLACK + f"{URL_GEO2}\n" + Style.RESET_ALL)

        return module1()


if __name__ == "__main__":
    module1()
